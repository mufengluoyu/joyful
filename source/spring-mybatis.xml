<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd    
                        http://www.springframework.org/schema/tx
        				http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">  
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.joyful" />  
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
	 			 init-method="init" destroy-method="close">
		<!-- 数据库连接名 --> 
		<property name="url" value="${url}"/>
		<!-- 数据库用户名 -->
		<property name="username" value="${username}"/>	
		<property name="password" value="${password}"/>
		<!-- 数据使用的链接驱动 -->
		<property name="driverClassName" value="${driver}"/>
		<!-- 初始化时建立物理连接的个数 ，最小，最大-->
		<property name="initialSize" value="${initialSize}"/>
		<property name="minIdle" value="${maxIdle}" /> 
		<property name="maxActive" value="${maxActive}" />
		<!-- 配置获取连接等待超时的时间 --> 
		<property name="maxWait" value="${maxWait}" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
		<property name="testWhileIdle" value="true" />
		
		<!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="true" /> 
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大同时需要配置，比如说oracle。在mysql下建议关闭。 
		    <property name="poolPreparedStatements" value="false" /> 
		    <property name="maxPoolPreparedStatementPerConnectionSize"   value="20" />
	    -->
	    <!-- 调用时的时间超过了1800ms之后直接关掉该链接   连接池为了防止程序从池里取得连接后忘记归还的情况, 而提供了一些参数来设置一个租期, 使用这个可以在一定程度上防止连接泄漏
		    <property name="removeAbandoned" value="true" />
			<property name="removeAbandonedTimeout" value="1800" /> 
		-->
		<!-- 配置监控统计拦截的filters 主要用来监控sql的执行状态时间以及反映时间-->
	    <property name="filters" value="stat" /> 
		
	</bean>
	
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapper.xml文件 -->  
        <property name="mapperLocations" value="classpath:/com/joyful/mapper/**/*.xml"></property> 
        <!-- 配置过滤器和对应的mybatis的配置 --> 
        <property name="configLocation" value="classpath:/mybatis-config.xml" />
    </bean>
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.joyful" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="annotationClass" value="com.joyful.common.annotation.MyBatisDao"/> 
    </bean>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
 	<!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" /> 
</beans>